{"remainingRequest":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liyanliang/Desktop/便家/tob-bianjia-clint/src/components/goods/Params.vue?vue&type=style&index=0&id=8c7b49e2&lang=less&scoped=true&","dependencies":[{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/src/components/goods/Params.vue","mtime":1679735545016},{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyanliang/Desktop/便家/tob-bianjia-clint/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY2F0X29wdCB7CiAgbWFyZ2luLXRvcDogMTVweDsKfQouZWwtdGFnIHsKICAvLyBtYXJnaW4tdG9wOiAxNXB4OwogIG1hcmdpbi1yaWdodDogMTVweDsKfQoucGFyYW1zYnRuIHsKICBtYXJnaW4tYm90dG9tOiAxNXB4Owp9Ci5pbnB1dC1uZXctdGFnIHsKICB3aWR0aDogMTAwcHg7Cn0K"},{"version":3,"sources":["Params.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Params.vue","sourceRoot":"src/components/goods","sourcesContent":["<template>\n  <div>\n    <!-- 面包屑 -->\n    <el-breadcrumb separator=\"/\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>\n        <a href=\"/home\">商品管理</a>\n      </el-breadcrumb-item>\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片布局 -->\n    <el-card>\n      <!-- 警告组件 -->\n      <el-alert title=\"注意只允许为第三级分类设置相关参数！\" :closable=\"false\" type=\"warning\" show-icon></el-alert>\n      <!-- 商品分类区域 -->\n      <el-row class=\"cat_opt\">\n        <el-col>\n          <span>选择商品分类：</span>\n\n          <el-cascader\n            v-model=\"selectCateKeys\"\n            :options=\"caetList\"\n            :props=\"cateProps\"\n            @change=\"handleChange\"\n          ></el-cascader>\n        </el-col>\n      </el-row>\n\n      <!-- tabs标签页 -->\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\n        <!-- 动态参数面板 -->\n        <el-tab-pane label=\"动态参数\" name=\"many\">\n          <el-button\n            class=\"paramsbtn\"\n            :disabled=\"isBtnDisabled\"\n            type=\"primary\"\n            size=\"mini\"\n            @click=\"addDialogVisible=true\"\n          >添加参数</el-button>\n          <el-table :data=\"manyTableData\" border stripe>\n            <!-- 展开行 -->\n            <el-table-column type=\"expand\">\n              <template v-slot=\"scope\">\n                <el-tag\n                  @close=\"handleClose(i,scope.row)\"\n                  v-for=\"(item,i) in scope.row.attr_vals\"\n                  closable\n                  :key=\"i\"\n                >{{item}}</el-tag>\n                <!-- 输入框 -->\n                <el-input\n                  class=\"input-new-tag\"\n                  v-if=\"scope.row.inputVisible\"\n                  v-model=\"scope.row.inputValue\"\n                  ref=\"saveTagInput\"\n                  size=\"small\"\n                  @keyup.enter.native=\"handleInputConfirm(scope.row)\"\n                  @blur=\"handleInputConfirm(scope.row)\"\n                ></el-input>\n                <!-- 添加按钮 -->\n                <el-button\n                  v-else\n                  class=\"button-new-tag\"\n                  size=\"small\"\n                  @click=\"showInput(scope.row)\"\n                >+ New Tag</el-button>\n              </template>\n            </el-table-column>\n            <el-table-column type=\"index\"></el-table-column>\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template v-slot=\"scope\">\n                <el-button\n                  type=\"primary\"\n                  icon=\"el-icon-edit\"\n                  @click=\"showEditDialog(scope.row.attr_id)\"\n                  size=\"mini\"\n                >编辑</el-button>\n                <el-button\n                  type=\"danger\"\n                  @click=\"removeParmas(scope.row.attr_id)\"\n                  icon=\"el-icon-delete\"\n                  size=\"mini\"\n                >删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n        <!-- 静态属性 -->\n        <el-tab-pane label=\"静态属性\" name=\"only\">\n          <el-button\n            :disabled=\"isBtnDisabled\"\n            type=\"primary\"\n            @click=\"addDialogVisible=true\"\n            size=\"mini\"\n            class=\"paramsbtn\"\n          >添加属性</el-button>\n          <el-table :data=\"onlyTableData\" border stripe>\n            <!-- 展开行 -->\n            <el-table-column type=\"expand\">\n              <template v-slot=\"scope\">\n                <el-tag\n                  @close=\"handleClose(i,scope.row)\"\n                  v-for=\"(item,i) in scope.row.attr_vals\"\n                  closable\n                  :key=\"i\"\n                >{{item}}</el-tag>\n                <!-- 输入框 -->\n                <el-input\n                  class=\"input-new-tag\"\n                  v-if=\"scope.row.inputVisible\"\n                  v-model=\"scope.row.inputValue\"\n                  ref=\"saveTagInput\"\n                  size=\"small\"\n                  @keyup.enter.native=\"handleInputConfirm(scope.row)\"\n                  @blur=\"handleInputConfirm(scope.row)\"\n                ></el-input>\n                <!-- 添加按钮 -->\n                <el-button\n                  v-else\n                  class=\"button-new-tag\"\n                  size=\"small\"\n                  @click=\"showInput(scope.row)\"\n                >+ New Tag</el-button>\n              </template>\n            </el-table-column>\n            <el-table-column type=\"index\"></el-table-column>\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template v-slot=\"scope\">\n                <el-button\n                  type=\"primary\"\n                  icon=\"el-icon-edit\"\n                  @click=\"showEditDialog(scope.row.attr_id)\"\n                  size=\"mini\"\n                >编辑</el-button>\n                <el-button\n                  @click=\"removeParmas(scope.row.attr_id)\"\n                  type=\"danger\"\n                  icon=\"el-icon-delete\"\n                  size=\"mini\"\n                >删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n      </el-tabs>\n    </el-card>\n    <!-- 添加对话框 -->\n    <el-dialog\n      :title=\"'添加'+titleText\"\n      :visible.sync=\"addDialogVisible\"\n      @close=\"addDialogColsed\"\n      width=\"50%\"\n    >\n      <!-- 添加参数对话 -->\n      <el-form ref=\"addFormRef\" :model=\"addForm\" label-width=\"80px\" :rules=\"addFormRules\">\n        <el-form-item prop=\"attr_name\" :label=\"titleText\">\n          <el-input v-model=\"addForm.attr_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addParmas\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 修改对话框 -->\n    <el-dialog\n      :title=\"'修改'+titleText\"\n      :visible.sync=\"editDialogVisible\"\n      @close=\"editDialogColsed\"\n      width=\"50%\"\n    >\n      <!-- 添加参数对话 -->\n      <el-form ref=\"editFormRef\" :model=\"editForm\" label-width=\"80px\" :rules=\"editFormRules\">\n        <el-form-item prop=\"attr_name\" :label=\"titleText\">\n          <el-input v-model=\"editForm.attr_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editParmas\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 商品数据\n      caetList: [],\n      // 级联选择框配置对象\n      cateProps: {\n        expandTrigger: \"hover\",\n        value: \"cat_id\",\n        label: \"cat_name\",\n        children: \"children\"\n      },\n      // 级联选择器双向绑定数组\n      selectCateKeys: [],\n      // 被激活的标签\n      activeName: \"many\",\n      //\n      manyTableData: [],\n      onlyTableData: [],\n      addDialogVisible: false,\n\n      // 添加参数的表单的数据\n      addForm: {\n        attr_name: \"\"\n      },\n      addFormRules: {\n        attr_name: [\n          { required: true, message: \"请输入分类名称\", trigger: \"blur\" }\n        ]\n      },\n      editDialogVisible: false,\n      // 修改的表单数据\n      editForm: {},\n      editFormRules: {\n        attr_name: [\n          { required: true, message: \"请输入分类名称\", trigger: \"blur\" }\n        ]\n      }\n    };\n  },\n  created() {\n    this.getCateList();\n  },\n  methods: {\n    async getCateList() {\n      const { data: res } = await this.$http.get(\"categories\");\n      if (res.meta.status !== 200) {\n        return this.$message.error(\"获取数据失败\");\n      }\n      this.caetList = res.data;\n      // console.log(this.caetList);\n    },\n    async handleChange() {\n      this.getParamsData();\n    },\n    // tab点击事件\n    handleClick() {\n      // console.log(this.activeName);\n      this.getParamsData();\n    },\n    //获取参数的列表数据\n    async getParamsData() {\n      // 强制三级\n      if (this.selectCateKeys.length !== 3) {\n        this.selectCateKeys = [];\n        this.manyTableData = [];\n        this.onlyTableData = [];\n        return this.$message.error(\"注意只允许为第三级分类设置相关参数！\");\n      }\n      // console.log(this.selectCateKeys);\n      // 获取当前选择的\n      const { data: res } = await this.$http.get(\n        `categories/${this.cateId}/attributes`,\n        {\n          params: { sel: this.activeName }\n        }\n      );\n      if (res.meta.status !== 200) {\n        return this.$message.error(\"获取失败！\");\n      }\n\n      res.data.forEach(item => {\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(\" \") : [];\n        // 文本框显示隐藏\n        item.inputVisible = false;\n        // 文本框输入的值\n        item.inputValue = \"\";\n      });\n      // console.log(res.data);\n      if (this.activeName === \"many\") {\n        this.manyTableData = res.data;\n        // console.log(this.manyTableData);\n      } else {\n        this.onlyTableData = res.data;\n      }\n    },\n    addDialogColsed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    // 点击添加\n    addParmas() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return;\n        const { data: res } = await this.$http.post(\n          `categories/${this.cateId}/attributes`,\n          {\n            attr_name: this.addForm.attr_name,\n            attr_sel: this.activeName\n          }\n        );\n        if (res.meta.status !== 201) {\n          return this.$message.error(\"添加失败\");\n        }\n        this.$message.success(\"添加成功！\");\n        this.addDialogVisible = false;\n        this.getParamsData();\n      });\n    },\n    //点击编辑\n    async showEditDialog(id) {\n      const { data: res } = await this.$http.get(\n        `categories/${this.cateId}/attributes/${id}`,\n        {\n          attr_name: this.editForm.attr_name,\n          attr_sel: this.activeName\n        }\n      );\n      this.editForm = res.data;\n      this.editDialogVisible = true;\n    },\n    editDialogColsed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 修改\n    editParmas() {\n      this.$refs.editFormRef.validate(async valid => {\n        // console.log(this.editForm);\n        const { data: res } = await this.$http.put(\n          `categories/${this.cateId}/attributes/${this.editForm.attr_id}`,\n          {\n            attr_name: this.editForm.attr_name,\n            attr_sel: this.activeName\n          }\n        );\n        if (res.meta.status !== 200) {\n          return this.$message.error(\"修改失败！\");\n        }\n        this.$message.success(\"修改成功\");\n        this.editDialogVisible = false;\n        this.getParamsData();\n      });\n    },\n    async removeParmas(id) {\n      const confirmResult = await this.$confirm(\n        \"此操作将永久删除该文件, 是否继续?\",\n        \"提示\",\n        {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }\n      ).catch(err => err);\n      // console.log(confirmResult);\n      if (confirmResult !== \"confirm\") {\n        return this.$message.info(\"已取消\");\n      }\n      const { data: res } = await this.$http.delete(\n        `categories/${this.cateId}/attributes/${id}`,\n        {\n          attr_name: this.editForm.attr_name,\n          attr_sel: this.activeName\n        }\n      );\n      if (res.meta.status !== 200) {\n        return this.$message.error(\"删除失败！\");\n      }\n      this.$message.success(\"删除成功！\");\n      this.getParamsData();\n    },\n    // 文本框事件\n    async handleInputConfirm(row) {\n      // console.log(\"ok\");\n      if (row.inputValue.trim().length === 0) {\n        row.inputValue = \"\";\n        row.inputVisible = false;\n        return;\n      }\n      row.attr_vals.push(row.inputValue.trim());\n      row.inputValue = \"\";\n      row.inputVisible = false;\n      this.saveAttrValue(row);\n    },\n    // 将attr_vals操作保存\n    async saveAttrValue(row) {\n      const { data: res } = await this.$http.put(\n        `categories/${this.cateId}/attributes/${row.attr_id}`,\n        {\n          attr_name: row.attr_name,\n          attr_sel: row.attr_sel,\n          attr_vals: row.attr_vals.join(\" \")\n        }\n      );\n      if (res.meta.status !== 200) {\n        return this.$message.error(\"修改失败\");\n      }\n      this.$message.success(\"修改成功！\");\n    },\n    //点击展示文本框\n    showInput(row) {\n      row.inputVisible = true;\n\n      this.$nextTick(() => {\n        this.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    handleClose(i, row) {\n      row.attr_vals.splice(i, 1);\n      this.saveAttrValue(row);\n    }\n  },\n  computed: {\n    // 按钮是否禁用\n    isBtnDisabled() {\n      if (this.selectCateKeys.length !== 3) {\n        return true;\n      }\n      return false;\n    },\n    // 当前选择id\n    cateId() {\n      if (this.selectCateKeys.length === 3) {\n        return this.selectCateKeys[2];\n      }\n      return null;\n    },\n    //计算添加值\n    titleText() {\n      if (this.activeName === \"many\") {\n        return \"动态参数\";\n      }\n      return \"静态属性\";\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.cat_opt {\n  margin-top: 15px;\n}\n.el-tag {\n  // margin-top: 15px;\n  margin-right: 15px;\n}\n.paramsbtn {\n  margin-bottom: 15px;\n}\n.input-new-tag {\n  width: 100px;\n}\n</style>"]}]}